
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.0
 * Query Engine version: 9c30299f5a0ea26a96790e13f796dc6094db3173
 */
Prisma.prismaVersion = {
  client: "6.11.0",
  engine: "9c30299f5a0ea26a96790e13f796dc6094db3173"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.PermisoScalarFieldEnum = {
  id: 'id',
  codigo: 'codigo',
  nombre: 'nombre',
  descripcion: 'descripcion',
  modulo: 'modulo',
  activo: 'activo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RolPermisoScalarFieldEnum = {
  id: 'id',
  rol: 'rol',
  permisoId: 'permisoId',
  createdAt: 'createdAt'
};

exports.Prisma.UsuarioPermisoScalarFieldEnum = {
  id: 'id',
  usuarioId: 'usuarioId',
  permisoId: 'permisoId',
  fechaInicio: 'fechaInicio',
  fechaFin: 'fechaFin',
  activo: 'activo'
};

exports.Prisma.CargoPermisoScalarFieldEnum = {
  id: 'id',
  cargo: 'cargo',
  permisoId: 'permisoId',
  createdAt: 'createdAt'
};

exports.Prisma.InstitucionEducativaScalarFieldEnum = {
  id: 'id',
  codigoModular: 'codigoModular',
  nombreInstitucion: 'nombreInstitucion',
  nombreComercial: 'nombreComercial',
  tipoGestion: 'tipoGestion',
  modalidad: 'modalidad',
  ugel: 'ugel',
  dre: 'dre',
  ubigeo: 'ubigeo',
  direccion: 'direccion',
  distrito: 'distrito',
  provincia: 'provincia',
  departamento: 'departamento',
  telefono: 'telefono',
  email: 'email',
  sitioWeb: 'sitioWeb',
  resolucionCreacion: 'resolucionCreacion',
  fechaCreacion: 'fechaCreacion',
  resolucionActual: 'resolucionActual',
  logo: 'logo',
  directorId: 'directorId',
  cicloEscolarActual: 'cicloEscolarActual',
  fechaInicioClases: 'fechaInicioClases',
  fechaFinClases: 'fechaFinClases',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  emailVerified: 'emailVerified',
  image: 'image',
  role: 'role',
  apellidoPaterno: 'apellidoPaterno',
  apellidoMaterno: 'apellidoMaterno',
  dni: 'dni',
  fechaNacimiento: 'fechaNacimiento',
  sexo: 'sexo',
  estadoCivil: 'estadoCivil',
  nacionalidad: 'nacionalidad',
  direccion: 'direccion',
  ubigeo: 'ubigeo',
  distrito: 'distrito',
  provincia: 'provincia',
  departamento: 'departamento',
  telefono: 'telefono',
  telefonoEmergencia: 'telefonoEmergencia',
  codigoEstudiante: 'codigoEstudiante',
  codigoSiagie: 'codigoSiagie',
  codigoModular: 'codigoModular',
  numeroExpediente: 'numeroExpediente',
  tipoSangre: 'tipoSangre',
  alergias: 'alergias',
  condicionesMedicas: 'condicionesMedicas',
  contactoEmergencia: 'contactoEmergencia',
  cargo: 'cargo',
  area: 'area',
  fechaIngreso: 'fechaIngreso',
  fechaSalida: 'fechaSalida',
  numeroContrato: 'numeroContrato',
  nivelAcademicoId: 'nivelAcademicoId',
  turno: 'turno',
  viveConPadres: 'viveConPadres',
  tipoVivienda: 'tipoVivienda',
  serviciosBasicos: 'serviciosBasicos',
  transporteEscolar: 'transporteEscolar',
  becario: 'becario',
  tipoBeca: 'tipoBeca',
  programaSocial: 'programaSocial',
  especialidad: 'especialidad',
  titulo: 'titulo',
  colegioProfesor: 'colegioProfesor',
  fechaContratacion: 'fechaContratacion',
  tipoContrato: 'tipoContrato',
  escalaMagisterial: 'escalaMagisterial',
  ocupacion: 'ocupacion',
  lugarTrabajo: 'lugarTrabajo',
  ingresoFamiliar: 'ingresoFamiliar',
  gradoInstruccion: 'gradoInstruccion',
  institucionId: 'institucionId',
  estado: 'estado',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RelacionFamiliarScalarFieldEnum = {
  id: 'id',
  padreTutorId: 'padreTutorId',
  hijoId: 'hijoId',
  parentesco: 'parentesco',
  contactoPrimario: 'contactoPrimario',
  autorizadoRecoger: 'autorizadoRecoger',
  viveCon: 'viveCon',
  orden: 'orden'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.PasswordResetTokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  expires: 'expires',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.NivelScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  descripcion: 'descripcion',
  institucionId: 'institucionId',
  activo: 'activo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GradoScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  codigo: 'codigo',
  descripcion: 'descripcion',
  orden: 'orden',
  nivelId: 'nivelId',
  activo: 'activo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NivelAcademicoScalarFieldEnum = {
  id: 'id',
  seccion: 'seccion',
  descripcion: 'descripcion',
  capacidad: 'capacidad',
  capacidadMaxima: 'capacidadMaxima',
  aulaAsignada: 'aulaAsignada',
  nivelId: 'nivelId',
  gradoId: 'gradoId',
  tutorId: 'tutorId',
  institucionId: 'institucionId',
  anioAcademico: 'anioAcademico',
  activo: 'activo',
  turno: 'turno',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PeriodoAcademicoScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  tipo: 'tipo',
  numero: 'numero',
  fechaInicio: 'fechaInicio',
  fechaFin: 'fechaFin',
  anioEscolar: 'anioEscolar',
  activo: 'activo',
  institucionId: 'institucionId'
};

exports.Prisma.AreaCurricularScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  codigo: 'codigo',
  descripcion: 'descripcion',
  orden: 'orden',
  color: 'color',
  activa: 'activa',
  competencias: 'competencias',
  institucionId: 'institucionId',
  nivelId: 'nivelId',
  creditos: 'creditos',
  parentId: 'parentId'
};

exports.Prisma.CursoScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  codigo: 'codigo',
  descripcion: 'descripcion',
  anioAcademico: 'anioAcademico',
  horasSemanales: 'horasSemanales',
  creditos: 'creditos',
  alcance: 'alcance',
  areaCurricularId: 'areaCurricularId',
  nivelAcademicoId: 'nivelAcademicoId',
  gradoId: 'gradoId',
  nivelId: 'nivelId',
  institucionId: 'institucionId',
  profesorId: 'profesorId',
  activo: 'activo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HorarioScalarFieldEnum = {
  id: 'id',
  cursoId: 'cursoId',
  diaSemana: 'diaSemana',
  horaInicio: 'horaInicio',
  horaFin: 'horaFin',
  aula: 'aula'
};

exports.Prisma.MatriculaScalarFieldEnum = {
  id: 'id',
  numeroMatricula: 'numeroMatricula',
  estudianteId: 'estudianteId',
  nivelAcademicoId: 'nivelAcademicoId',
  anioAcademico: 'anioAcademico',
  fechaMatricula: 'fechaMatricula',
  estado: 'estado',
  esPrimeraVez: 'esPrimeraVez',
  esRepitente: 'esRepitente',
  procedencia: 'procedencia',
  observaciones: 'observaciones'
};

exports.Prisma.MatriculaCursoScalarFieldEnum = {
  id: 'id',
  matriculaId: 'matriculaId',
  cursoId: 'cursoId',
  fechaInscripcion: 'fechaInscripcion',
  estado: 'estado',
  userId: 'userId'
};

exports.Prisma.EvaluacionScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  descripcion: 'descripcion',
  tipo: 'tipo',
  fecha: 'fecha',
  fechaLimite: 'fechaLimite',
  peso: 'peso',
  notaMinima: 'notaMinima',
  escalaCalificacion: 'escalaCalificacion',
  cursoId: 'cursoId',
  periodoId: 'periodoId',
  activa: 'activa',
  recuperable: 'recuperable',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotaScalarFieldEnum = {
  id: 'id',
  valor: 'valor',
  valorLiteral: 'valorLiteral',
  valorDescriptivo: 'valorDescriptivo',
  comentario: 'comentario',
  estudianteId: 'estudianteId',
  cursoId: 'cursoId',
  evaluacionId: 'evaluacionId',
  registradoPor: 'registradoPor',
  fechaRegistro: 'fechaRegistro',
  modificadoPor: 'modificadoPor',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AsistenciaScalarFieldEnum = {
  id: 'id',
  fecha: 'fecha',
  presente: 'presente',
  tardanza: 'tardanza',
  horaLlegada: 'horaLlegada',
  justificada: 'justificada',
  justificacion: 'justificacion',
  estudianteId: 'estudianteId',
  cursoId: 'cursoId',
  registradoPor: 'registradoPor',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DocumentoScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  tipo: 'tipo',
  ruta: 'ruta',
  tamaño: 'tamaño',
  extension: 'extension',
  usuarioId: 'usuarioId',
  fechaSubida: 'fechaSubida',
  fechaVencimiento: 'fechaVencimiento',
  descripcion: 'descripcion',
  verificado: 'verificado',
  verificadoPor: 'verificadoPor',
  fechaVerificacion: 'fechaVerificacion',
  publico: 'publico',
  obligatorio: 'obligatorio'
};

exports.Prisma.PagoScalarFieldEnum = {
  id: 'id',
  numeroBoleta: 'numeroBoleta',
  concepto: 'concepto',
  descripcion: 'descripcion',
  monto: 'monto',
  moneda: 'moneda',
  fechaVencimiento: 'fechaVencimiento',
  fechaPago: 'fechaPago',
  fechaRegistro: 'fechaRegistro',
  estado: 'estado',
  metodoPago: 'metodoPago',
  referenciaPago: 'referenciaPago',
  numeroOperacion: 'numeroOperacion',
  entidadBancaria: 'entidadBancaria',
  comprobante: 'comprobante',
  recibo: 'recibo',
  estudianteId: 'estudianteId',
  observaciones: 'observaciones',
  descuento: 'descuento',
  mora: 'mora',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AnuncioScalarFieldEnum = {
  id: 'id',
  titulo: 'titulo',
  contenido: 'contenido',
  resumen: 'resumen',
  imagen: 'imagen',
  fechaPublicacion: 'fechaPublicacion',
  fechaExpiracion: 'fechaExpiracion',
  activo: 'activo',
  dirigidoA: 'dirigidoA',
  importante: 'importante',
  urgente: 'urgente',
  fijado: 'fijado',
  autorId: 'autorId',
  vistas: 'vistas',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EventoScalarFieldEnum = {
  id: 'id',
  titulo: 'titulo',
  descripcion: 'descripcion',
  imagen: 'imagen',
  fechaInicio: 'fechaInicio',
  fechaFin: 'fechaFin',
  horaInicio: 'horaInicio',
  horaFin: 'horaFin',
  fechaLimiteInscripcion: 'fechaLimiteInscripcion',
  ubicacion: 'ubicacion',
  aula: 'aula',
  direccion: 'direccion',
  modalidad: 'modalidad',
  enlaceVirtual: 'enlaceVirtual',
  tipo: 'tipo',
  categoria: 'categoria',
  publico: 'publico',
  dirigidoA: 'dirigidoA',
  capacidadMaxima: 'capacidadMaxima',
  requiereInscripcion: 'requiereInscripcion',
  organizadorId: 'organizadorId',
  estado: 'estado',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  estudiante: 'estudiante',
  profesor: 'profesor',
  administrativo: 'administrativo',
  padre: 'padre'
};

exports.TipoGestion = exports.$Enums.TipoGestion = {
  PUBLICA: 'PUBLICA',
  PRIVADA: 'PRIVADA',
  PARROQUIAL: 'PARROQUIAL',
  CONVENIO: 'CONVENIO'
};

exports.Modalidad = exports.$Enums.Modalidad = {
  PRESENCIAL: 'PRESENCIAL',
  DISTANCIA: 'DISTANCIA',
  SEMIPRESENCIAL: 'SEMIPRESENCIAL'
};

exports.Cargo = exports.$Enums.Cargo = {
  ninguno: 'ninguno',
  administrador: 'administrador',
  asistente: 'asistente',
  auxiliar: 'auxiliar',
  director: 'director',
  secretaria: 'secretaria',
  contador: 'contador',
  coordinador: 'coordinador',
  mantenimiento: 'mantenimiento',
  subdirector: 'subdirector',
  coordinador_academico: 'coordinador_academico',
  coordinador_tutoria: 'coordinador_tutoria',
  psicologia: 'psicologia',
  enfermeria: 'enfermeria'
};

exports.Turno = exports.$Enums.Turno = {
  MANANA: 'MANANA',
  TARDE: 'TARDE',
  NOCHE: 'NOCHE',
  CONTINUO: 'CONTINUO'
};

exports.EstadoUsuario = exports.$Enums.EstadoUsuario = {
  activo: 'activo',
  inactivo: 'inactivo',
  suspendido: 'suspendido',
  eliminado: 'eliminado',
  retirado: 'retirado',
  egresado: 'egresado',
  licencia: 'licencia',
  vacaciones: 'vacaciones',
  trasladado: 'trasladado',
  graduado: 'graduado',
  condicional: 'condicional',
  practicante: 'practicante',
  jubilado: 'jubilado',
  expulsado: 'expulsado'
};

exports.TipoPeriodo = exports.$Enums.TipoPeriodo = {
  BIMESTRE: 'BIMESTRE',
  TRIMESTRE: 'TRIMESTRE',
  SEMESTRE: 'SEMESTRE',
  ANUAL: 'ANUAL'
};

exports.AlcanceCurso = exports.$Enums.AlcanceCurso = {
  SECCION_ESPECIFICA: 'SECCION_ESPECIFICA',
  TODO_EL_GRADO: 'TODO_EL_GRADO',
  TODO_EL_NIVEL: 'TODO_EL_NIVEL',
  TODO_LA_INSTITUCION: 'TODO_LA_INSTITUCION'
};

exports.TipoEvaluacion = exports.$Enums.TipoEvaluacion = {
  DIAGNOSTICA: 'DIAGNOSTICA',
  FORMATIVA: 'FORMATIVA',
  SUMATIVA: 'SUMATIVA',
  RECUPERACION: 'RECUPERACION',
  EXAMEN_FINAL: 'EXAMEN_FINAL',
  TRABAJO_PRACTICO: 'TRABAJO_PRACTICO',
  PROYECTO: 'PROYECTO',
  EXPOSICION: 'EXPOSICION'
};

exports.EscalaCalificacion = exports.$Enums.EscalaCalificacion = {
  VIGESIMAL: 'VIGESIMAL',
  LITERAL: 'LITERAL',
  DESCRIPTIVA: 'DESCRIPTIVA'
};

exports.TipoDocumento = exports.$Enums.TipoDocumento = {
  CERTIFICADO_ESTUDIOS: 'CERTIFICADO_ESTUDIOS',
  CONSTANCIA_MATRICULA: 'CONSTANCIA_MATRICULA',
  CONSTANCIA_VACANTE: 'CONSTANCIA_VACANTE',
  TRASLADO: 'TRASLADO',
  BOLETA_NOTAS: 'BOLETA_NOTAS',
  ACTA_NOTAS: 'ACTA_NOTAS',
  FICHA_MATRICULA: 'FICHA_MATRICULA',
  RECORD_ACADEMICO: 'RECORD_ACADEMICO',
  CONSTANCIA_EGRESADO: 'CONSTANCIA_EGRESADO',
  DIPLOMA_TITULO: 'DIPLOMA_TITULO',
  PARTIDA_NACIMIENTO: 'PARTIDA_NACIMIENTO',
  DNI_COPIA: 'DNI_COPIA',
  FOTO: 'FOTO',
  FICHA_SOCIOECONOMICA: 'FICHA_SOCIOECONOMICA'
};

exports.Prisma.ModelName = {
  Permiso: 'Permiso',
  RolPermiso: 'RolPermiso',
  UsuarioPermiso: 'UsuarioPermiso',
  CargoPermiso: 'CargoPermiso',
  InstitucionEducativa: 'InstitucionEducativa',
  User: 'User',
  RelacionFamiliar: 'RelacionFamiliar',
  Account: 'Account',
  VerificationToken: 'VerificationToken',
  PasswordResetToken: 'PasswordResetToken',
  Nivel: 'Nivel',
  Grado: 'Grado',
  NivelAcademico: 'NivelAcademico',
  PeriodoAcademico: 'PeriodoAcademico',
  AreaCurricular: 'AreaCurricular',
  Curso: 'Curso',
  Horario: 'Horario',
  Matricula: 'Matricula',
  MatriculaCurso: 'MatriculaCurso',
  Evaluacion: 'Evaluacion',
  Nota: 'Nota',
  Asistencia: 'Asistencia',
  Documento: 'Documento',
  Pago: 'Pago',
  Anuncio: 'Anuncio',
  Evento: 'Evento'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
